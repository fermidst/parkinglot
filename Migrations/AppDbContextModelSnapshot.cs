// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingLot.Context;

namespace ParkingLot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ParkingLot.Models.Car", b =>
                {
                    b.Property<string>("RegistrationNumber")
                        .HasColumnName("registration_number")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasColumnType("text");

                    b.Property<long>("OwnerId")
                        .HasColumnName("owner_id")
                        .HasColumnType("bigint");

                    b.Property<string>("VehicleBrand")
                        .IsRequired()
                        .HasColumnName("vehicle_brand")
                        .HasColumnType("text");

                    b.HasKey("RegistrationNumber");

                    b.HasIndex("OwnerId");

                    b.ToTable("car");
                });

            modelBuilder.Entity("ParkingLot.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("location_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("location");
                });

            modelBuilder.Entity("ParkingLot.Models.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("owner_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("owner name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("owner");
                });

            modelBuilder.Entity("ParkingLot.Models.Rate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rate_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("rate");
                });

            modelBuilder.Entity("ParkingLot.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ticket_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnName("arrival_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnName("departure_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("LocationId")
                        .HasColumnName("car_location")
                        .HasColumnType("bigint");

                    b.Property<long>("RateId")
                        .HasColumnName("rate")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnName("registration_number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RateId");

                    b.HasIndex("RegistrationNumber");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("ParkingLot.Models.Car", b =>
                {
                    b.HasOne("ParkingLot.Models.Owner", "Owner")
                        .WithMany("Cars")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingLot.Models.Ticket", b =>
                {
                    b.HasOne("ParkingLot.Models.Location", "Location")
                        .WithMany("Tickets")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingLot.Models.Rate", "Rate")
                        .WithMany("Tickets")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingLot.Models.Car", "Car")
                        .WithMany("Tickets")
                        .HasForeignKey("RegistrationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
